{% assign current_variant = product.selected_or_first_available_variant %}
{% assign featured_image = current_variant.featured_image | default: product.featured_image %}
{% assign minSmartPriceOfProduct = current_variant.price %}
{% assign minEssentialPriceOfProduct = current_variant.price %}

{% for variant in product.variants %}
  {% if variant.options contains 'Smart' %}
    {% if variant.price < minSmartPriceOfProduct %}
      {% assign minSmartPriceOfProduct = variant.price %}
    {% endif %}
  {% else %}
    {% if variant.price < minEssentialPriceOfProduct %}
      {% assign minEssentialPriceOfProduct = variant.price %}
    {% endif %}
  {% endif %}
{% endfor %}

<div class="w-full h-screen flex bg">
  <div class="relative basis-[70%] my-5 mr-[36px] ml-[26px]">
    <header class="absolute top-0 left-0 right-0 flex justify-between z-10">
      <a href="">Logo</a>
      <div class="flex gap-10">
        <p>30-Day Risk-Free Trial</p>
        <p>Free Shipping & Returns</p>
      </div>
    </header>
    <div class="galleries h-full">
      <div class="gallery">
        {% for image in product.images %}
          {% assign imageAltWithoutColor = image.alt | split: '-color' | first %}
          {% if featured_image.alt contains imageAltWithoutColor
            and image.alt contains product.metafields.custom.color
          %}
            <div
              class="w-full h-full mr-5 bg-cover bg-center bg-no-repeat"
              style="background-image: url('{{ image |  image_url |  prepend: 'https:'  }}');"
            >
              {% comment %} <img src="{{ image |  img_url: "large"  }}" alt=""> {% endcomment %}
            </div>
          {% endif %}
        {% endfor %}
      </div>
      <div class="gallery-nav ">
        {% for image in product.images %}
          {% assign imageAltWithoutColor = image.alt | split: '-color' | first %}
          {% if featured_image.alt contains imageAltWithoutColor
            and image.alt contains product.metafields.custom.color
          %}
            <div class="mr-5">
              <img src="{{ image |  image_url: width: "20px" }}" alt="">
            </div>
          {% endif %}
        {% endfor %}
      </div>
    </div>
  </div>
  <aside class="bg-white flex-1 overflow-hidden relative h-screen">
    <div class="tabs flex flex-col h-screen ">
      <div class="tabs__nav flex gap-[36px] pt-[36px] mx-[36px] pb-[16px] mb-[36px] border-b border-[#EEECE7]">
        <button type="button" data-tab="1" class="tabs__btn active">1. Sofa</button>
        <button type="button" data-tab="2" class="tabs__btn">2. Add-ons</button>
        <button type="button" data-tab="3" class="tabs__btn">3. Summary</button>
      </div>
      <div class="tabs__content overflow-y-auto grow">
        <div data-tab="1" class="tabs__item active">
          <div class="px-[36px] pb-[36px]">
            <input type="hidden" name="id" id="product-id" value="{{ current_variant.id }}">

            {% comment %}
              <div class="variant-info hidden">
                {{ current_variant | json }}
              </div>
            {% endcomment %}

            {% if product.variants.size > 1 %}
              <div class="product-options" data-url="{{ product.url }}">
                {% assign numOfSeats = nill %}
                {% for opt in current_variant.options %}
                  {% if opt contains 'seats' %}
                    {% assign numOfSeats = opt %}
                  {% endif %}
                {% endfor %}
                {% for option in product.options_with_values %}
                  {% assign handleizeOptionName = option.name | handleize %}
                  {% case handleizeOptionName %}
                    {% when 'model' %}
                      <fieldset class="pb-[36px] mb-[36px] border-b border-[#EEECE7]">
                        <div class="flex justify-between mb-[16px]">
                          <legend>{{ option.name }}</legend>
                          <button>See difference</button>
                        </div>
                        <div class="values flex gap-[12px]">
                          {% for value in option.values %}
                            <input
                              {% if option.selected_value == value %}
                                checked
                              {% endif %}
                              type="radio"
                              name="{{ option.name }}"
                              value="{{ value }}"
                              class="model_input sr-only"
                              id="model_variant-{{ value }}"
                            >
                            <label
                              for="model_variant-{{ value }}"
                              class="value__wrapper flex flex-col gap-[6px] flex-1 py-[18px] px-[16px] border rounded-[5px]"
                            >
                              <span>{{ value }}</span>
                              <span>
                                {% if value == 'Smart' %}
                                  From {{ minSmartPriceOfProduct | money }}
                                {% else %}
                                  From {{ minEssentialPriceOfProduct | money }}
                                {% endif %}
                              </span>
                            </label>
                          {% endfor %}
                        </div>
                      </fieldset>

                    {% when 'number-of-seats' %}
                      <fieldset class="pb-[36px] mb-[36px] border-b border-[#EEECE7]">
                        <div class="flex justify-between">
                          <legend>{{ option.name }}</legend>
                          <button>Specifications</button>
                        </div>
                        <div class="values">
                          {% for value in option.values %}
                            {% assign imageName = option.name | handleize | append: '-' | append: value | downcase %}
                            {% assign images = product.metafields.custom.variants_details.value.number_of_seats_images.value %}
                            {% assign imageUrl = nill %}

                            {% for image in images %}
                              {% assign imageString = image | json %}
                              {% if imageString contains imageName %}
                                {% assign imageUrl = image %}
                              {% endif %}
                            {% endfor %}

                            <label class="value__wrapper">
                              <img src="{{ imageUrl | image_url }}" alt="">
                              <input
                                {% if option.selected_value == value %}
                                  checked
                                {% endif %}
                                type="radio"
                                name="{{ option.name }}"
                                value="{{ value }}"
                              >
                            </label>
                          {% endfor %}
                        </div>
                      </fieldset>

                    {% when 'configuration' %}
                      <fieldset class="pb-[36px] mb-[36px] border-b border-[#EEECE7]">
                        <div class="flex justify-between">
                          <legend>{{ option.name }}</legend>
                          <button>Specifications</button>
                        </div>
                        <div class="values">
                          {% for value in option.values %}
                            {% assign imageName = option.name
                              | handleize
                              | append: '-'
                              | append: value
                              | append: '-'
                              | append: numOfSeats
                              | downcase
                            %}
                            {% assign images = product.metafields.custom.variants_details.value.configuration_images.value %}
                            {% assign imageUrl = nill %}

                            {% for image in images %}
                              {% assign imageString = image | json %}
                              {% if imageString contains imageName %}
                                {% assign imageUrl = image %}
                              {% endif %}
                            {% endfor %}

                            <label class="value__wrapper">
                              <img src="{{ imageUrl |  image_url }}" alt="">
                              <input
                                {% if option.selected_value == value %}
                                  checked
                                {% endif %}
                                type="radio"
                                name="{{ option.name }}"
                                value="{{ value }}"
                              >
                            </label>
                          {% endfor %}
                        </div>
                      </fieldset>
                  {% endcase %}
                {% endfor %}

                <p class="line-item-property__field">
                  <label>Color</label><br>
                  <input
                    required
                    class="required"
                    type="radio"
                    {% if product.metafields.custom.color == 'red' %}
                      checked
                    {% endif %}
                    name="properties[Color]"
                    value="red"
                  >
                  <span>red</span><br>
                  <input
                    required
                    class="required"
                    type="radio"
                    {% if product.metafields.custom.color == 'blue' %}
                      checked
                    {% endif %}
                    name="properties[Color]"
                    value="blue"
                  >
                  <span>blue</span><br>
                  <input
                    required
                    class="required"
                    type="radio"
                    {% if product.metafields.custom.color == 'green' %}
                      checked
                    {% endif %}
                    name="properties[Color]"
                    value="green"
                  >
                  <span>green</span><br>
                </p>

                {% for subproduct in product.metafields.custom.subproducts.value %}
                  <fieldset class="pb-[36px] mb-[36px] border-b border-[#EEECE7]">
                    <legend>{{ subproduct.title }}</legend>
                    <div class="values">
                      {% for option in subproduct.options_with_values %}
                        {% for value in option.values %}
                          {% comment %} {% assign imageName = option.name | handleize | append: '-' | append: value | downcase %} {% endcomment %}
                          {% comment %} {% assign images = product.metafields.custom.variants_details.value.number_of_seats_images.value %} {% endcomment %}
                          {% comment %} {% assign imageUrl = nill %} {% endcomment %}

                          {% comment %}
                            {% for image in images %}
                              {% assign imageString = image | json %}
                              {% if imageString contains imageName %}
                                {% assign imageUrl = image %}
                              {% endif %}
                            {% endfor %}
                          {% endcomment %}

                          <label class="value__wrapper">
                            {% comment %} <img src="{{ imageUrl | image_url }}" alt=""> {% endcomment %}
                            <input
                              required
                              type="radio"
                              name="{{ subproduct.title |  handleize }}"
                              value="{{ value }}"
                            >
                            <span>{{ value }}</span>
                          </label>
                          <br>
                        {% endfor %}
                      {% endfor %}
                    </div>
                  </fieldset>
                {% endfor %}
              </div>
            {% endif %}
          </div>
        </div>
        <div data-tab="2" class="tabs__item">2</div>
        <div data-tab="3" class="tabs__item">3</div>
      </div>
      <div class="py-[20px] px-[36px] border-t border-[#EEECE7]">
        <div class="flex justify-between">
          <p>Total</p>
          <p class="product__price">{{ product.selected_or_first_available_variant.price | money }}</p>
        </div>
        <div class="flex">
          <button class="ml-auto">Next step</button>
        </div>
      </div>
    </div>
  </aside>
</div>
<script src="https://unpkg.com/flickity@2/dist/flickity.pkgd.min.js"></script>
<script>
  const createSliders = () => {
    const flky = new Flickity( ".gallery", {
      imagesLoaded: true,
      pageDots: false,
    });

    const flkyNav = new Flickity(".gallery-nav", {
      asNavFor: '.gallery',
      contain: true,
      imagesLoaded: true,
      pageDots: false,
      prevNextButtons: false,
    })
  }

  createSliders();

  const configurationButtonsRef = document.querySelector(".tabs__nav");
  const tabsItemsRef = document.querySelectorAll(".tabs__item");

  const onTabsClick = e => {    
    const currentBtn = e.target.closest("button")

    if(!currentBtn || currentBtn.classList.contains("active")){
        return;
    }

    const currentTabId = currentBtn.dataset.tab;
    const activeBtn = currentBtn.parentNode.querySelector(".active");
          
    tabsItemsRef.forEach(item => {
        item.dataset.tab === currentTabId ? item.classList.add("active") : item.classList.remove("active")
    })

    activeBtn?.classList.remove("active");
    currentBtn.classList.add("active")
  }

  configurationButtonsRef.addEventListener("click", onTabsClick)

  const product = {{ product | json }};
  const metafields = {{ product.metafields.custom | json }};

  const flickitySlidersRef = document.querySelectorAll(".flickity-slider");
  const variantIdInputRef = document.querySelector("#product-id");
  const productOptionsRef = document.querySelector('.product-options');
  const optionsValuesInputsRefs = productOptionsRef.querySelectorAll('input[type="radio"]');
  
  const getSelectedVariant = () => {
    const selectedOptions = [];
    
    optionsValuesInputsRefs.forEach(input => {
      if(input.checked) {
        if(input.name === "properties[Color]"){
          metafields.color = input.value;
          return;
        }

        selectedOptions.push(input.value)
      }
    })
    
    const matchedVariant = product.variants.find(variant => {
      let pass = true;
      
      variant.options.forEach(option => {
        if(!selectedOptions.includes(option)){
          pass = false;
        }
      })

      return pass;
    })
    
    return matchedVariant;
  }
  
  const updateUrl = (selectedVariant) => {
    const url = `${productOptionsRef.dataset.url}?variant=${selectedVariant.id}` 
    window.history.replaceState({}, "", url)
  }

  // const updateImages = (variant) => {
  //   const allImages = product.media;
  //   const {featured_image} = variant;
  //   const matchedImages = allImages.filter(image => image.alt === featured_image.alt)

  //   const sliderContentRef = document.createDocumentFragment();

  //   flickitySlidersRef.forEach(slider => {
  //     const sliderImage = slider.querySelector("div");

  //     const newImages = [...matchedImages].map((image, i) => {
  //       const sliderImageCopy = sliderImage.cloneNode(sliderImage);
  //       sliderImageCopy.style.backgroundImage = `url('${image.src}')`
  //       if(i !== 0){
  //         sliderImageCopy.classList.remove("is-selected")
  //       }
  //       sliderContentRef.append(sliderImageCopy);
  //     })

  //     slider.innerHTML = "";
  //     slider.append(sliderContentRef)
  //   })
  // }

  const updateImages = (variant) => {
    const allImages = product.media;
    const {featured_image} = variant;
    const matchedImages = allImages.filter(image => {
      const imageAltWithoutColor = image.alt.slice(0, image.alt.indexOf("-color"));

      if(featured_image.alt.includes(imageAltWithoutColor) && image.alt.includes(metafields.color)){
        return true;
      }

      return false;
    })

    const slidersRef = document.querySelector(".galleries");
    const mainSliderRef = document.createElement("div");
    const navSliderRef = document.createElement("div");

    mainSliderRef.classList.add("gallery")
    navSliderRef.classList.add("gallery-nav")

    const mainSliderElements = matchedImages.map(image => {
      const imageRef = document.createElement("div");
      imageRef.classList.add("w-full", "h-full", "mr-5", "bg-cover", "bg-center", "bg-no-repeat")
      imageRef.style.backgroundImage = `url('${image.src}')`;
      
      return imageRef;
    })

    const navSliderElements = matchedImages.map(image => {
      const imageRef = document.createElement("img");
      imageRef.width = 20;
      imageRef.src = image.src;
      imageRef.classList.add("block", "mr-5");

      return imageRef;
    })

    slidersRef.innerHTML = "";

    mainSliderRef.classList.add("gallery", "h-full");
    mainSliderRef.append(...mainSliderElements);

    navSliderRef.classList.add("gallery-nav");
    navSliderRef.append(...navSliderElements)

    slidersRef.append(mainSliderRef, navSliderRef)
    createSliders();
  }

  const updatePrice = (variant) => {
    function  formatMoney(cents, format) {
      if (typeof cents == 'string') { cents = cents.replace('.',''); }
      var value = '';
      var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
      var formatString = (format || this.money_format);

      function defaultOption(opt, def) {
         return (typeof opt == 'undefined' ? def : opt);
      }

      function formatWithDelimiters(number, precision, thousands, decimal) {
        precision = defaultOption(precision, 2);
        thousands = defaultOption(thousands, ',');
        decimal   = defaultOption(decimal, '.');

        if (isNaN(number) || number == null) { return 0; }

        number = (number/100.0).toFixed(precision);

        var parts   = number.split('.'),
            dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
            cents   = parts[1] ? (decimal + parts[1]) : '';

        return dollars + cents;
      }

      switch(formatString.match(placeholderRegex)[1]) {
        case 'amount':
          value = formatWithDelimiters(cents, 2);
          break;
        case 'amount_no_decimals':
          value = formatWithDelimiters(cents, 0);
          break;
        case 'amount_with_comma_separator':
          value = formatWithDelimiters(cents, 2, '.', ',');
          break;
        case 'amount_no_decimals_with_comma_separator':
          value = formatWithDelimiters(cents, 0, '.', ',');
          break;
      }

      return formatString.replace(placeholderRegex, value);
    };

    document.querySelector('.product__price').textContent = formatMoney(variant.price, "{{ shop.money_format }}");
  }

  const onVariantChange = e => {
    const selectedVariant = getSelectedVariant();

    if(selectedVariant){
      updateUrl(selectedVariant);
      updatePrice(selectedVariant);
      updateImages(selectedVariant);
      variantIdInputRef.value = selectedVariant.id;
      console.log(selectedVariant)
    }
  }
  
  productOptionsRef.addEventListener("change", onVariantChange)
</script>
